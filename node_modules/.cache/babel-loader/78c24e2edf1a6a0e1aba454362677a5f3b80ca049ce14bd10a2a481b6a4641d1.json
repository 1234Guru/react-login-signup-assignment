{"ast":null,"code":"// Validation rules tailored to PDF requirements\n// Name: Only alphabets allowed (allow spaces/hyphens for real names)\nexport const validateName = v => {\n  if (!v) return 'Name is required';\n  if (!/^[A-Za-z][A-Za-z -]*$/.test(v)) return 'Only alphabets allowed';\n  return '';\n};\n\n// Username: must contain letters + numbers + special chars; allowed set below; no spaces\nexport const validateUsername = v => {\n  if (!v) return 'Username is required';\n  if (/\\s/.test(v)) return 'No spaces allowed';\n  if (!/^[A-Za-z0-9._@#$%!?-]+$/.test(v)) return 'Only letters, numbers, and . _ @ # $ % ! ? -';\n  if (!/[A-Za-z]/.test(v) || !/[0-9]/.test(v) || !/[._@#$%!?-]/.test(v)) {\n    return 'Use letters, numbers, and at least one special character';\n  }\n  if (v.length < 6) return 'Must be at least 6 characters';\n  return '';\n};\n\n// Password: same character policy as username; cannot equal username\nexport const validatePassword = (v, username = '') => {\n  if (!v) return 'Password is required';\n  if (/\\s/.test(v)) return 'No spaces allowed';\n  if (!/^[A-Za-z0-9._@#$%!?-]+$/.test(v)) return 'Only letters, numbers, and . _ @ # $ % ! ? -';\n  if (!/[A-Za-z]/.test(v) || !/[0-9]/.test(v) || !/[._@#$%!?-]/.test(v)) {\n    return 'Use letters, numbers, and at least one special character';\n  }\n  if (v.length < 8) return 'Must be at least 8 characters';\n  if (username && v === username) return 'Password must differ from username';\n  return '';\n};\n\n// Confirm password: must match password\nexport const validateConfirm = (confirm, password) => {\n  if (!confirm) return 'Please confirm password';\n  if (confirm !== password) return 'Passwords do not match';\n  return '';\n};\n\n// Email: must be a valid Gmail address\nexport const validateEmail = v => {\n  if (!v) return 'Email is required';\n  const emailOk = /^[A-Za-z0-9._%+-]+@gmail\\.com$/.test(v);\n  if (!emailOk) return 'Use a valid @gmail.com email';\n  return '';\n};\n\n// Phone: country code + number only (e.g., +91 9876543210)\nexport const validatePhone = v => {\n  if (!v) return 'Phone is required';\n  const ok = /^\\+\\d{1,3}[ -]?\\d{7,14}$/.test(v);\n  if (!ok) return 'Format: +<code> <number>';\n  return '';\n};\nexport const allValid = errors => Object.values(errors).every(e => !e);","map":{"version":3,"names":["validateName","v","test","validateUsername","length","validatePassword","username","validateConfirm","confirm","password","validateEmail","emailOk","validatePhone","ok","allValid","errors","Object","values","every","e"],"sources":["D:/PracticeFolds/reactJS/react-login-signup-assignment/src/validation/rules.js"],"sourcesContent":["// Validation rules tailored to PDF requirements\n// Name: Only alphabets allowed (allow spaces/hyphens for real names)\nexport const validateName = (v) => {\n  if (!v) return 'Name is required';\n  if (!/^[A-Za-z][A-Za-z -]*$/.test(v)) return 'Only alphabets allowed';\n  return '';\n};\n\n// Username: must contain letters + numbers + special chars; allowed set below; no spaces\nexport const validateUsername = (v) => {\n  if (!v) return 'Username is required';\n  if (/\\s/.test(v)) return 'No spaces allowed';\n  if (!/^[A-Za-z0-9._@#$%!?-]+$/.test(v)) return 'Only letters, numbers, and . _ @ # $ % ! ? -';\n  if (!/[A-Za-z]/.test(v) || !/[0-9]/.test(v) || !/[._@#$%!?-]/.test(v)) {\n    return 'Use letters, numbers, and at least one special character';\n  }\n  if (v.length < 6) return 'Must be at least 6 characters';\n  return '';\n};\n\n// Password: same character policy as username; cannot equal username\nexport const validatePassword = (v, username='') => {\n  if (!v) return 'Password is required';\n  if (/\\s/.test(v)) return 'No spaces allowed';\n  if (!/^[A-Za-z0-9._@#$%!?-]+$/.test(v)) return 'Only letters, numbers, and . _ @ # $ % ! ? -';\n  if (!/[A-Za-z]/.test(v) || !/[0-9]/.test(v) || !/[._@#$%!?-]/.test(v)) {\n    return 'Use letters, numbers, and at least one special character';\n  }\n  if (v.length < 8) return 'Must be at least 8 characters';\n  if (username && v === username) return 'Password must differ from username';\n  return '';\n};\n\n// Confirm password: must match password\nexport const validateConfirm = (confirm, password) => {\n  if (!confirm) return 'Please confirm password';\n  if (confirm !== password) return 'Passwords do not match';\n  return '';\n};\n\n// Email: must be a valid Gmail address\nexport const validateEmail = (v) => {\n  if (!v) return 'Email is required';\n  const emailOk = /^[A-Za-z0-9._%+-]+@gmail\\.com$/.test(v);\n  if (!emailOk) return 'Use a valid @gmail.com email';\n  return '';\n};\n\n// Phone: country code + number only (e.g., +91 9876543210)\nexport const validatePhone = (v) => {\n  if (!v) return 'Phone is required';\n  const ok = /^\\+\\d{1,3}[ -]?\\d{7,14}$/.test(v);\n  if (!ok) return 'Format: +<code> <number>';\n  return '';\n};\n\nexport const allValid = (errors) => Object.values(errors).every((e) => !e);\n"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,YAAY,GAAIC,CAAC,IAAK;EACjC,IAAI,CAACA,CAAC,EAAE,OAAO,kBAAkB;EACjC,IAAI,CAAC,uBAAuB,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,wBAAwB;EACrE,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAIF,CAAC,IAAK;EACrC,IAAI,CAACA,CAAC,EAAE,OAAO,sBAAsB;EACrC,IAAI,IAAI,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,mBAAmB;EAC5C,IAAI,CAAC,yBAAyB,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,8CAA8C;EAC7F,IAAI,CAAC,UAAU,CAACC,IAAI,CAACD,CAAC,CAAC,IAAI,CAAC,OAAO,CAACC,IAAI,CAACD,CAAC,CAAC,IAAI,CAAC,aAAa,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE;IACrE,OAAO,0DAA0D;EACnE;EACA,IAAIA,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE,OAAO,+BAA+B;EACxD,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACJ,CAAC,EAAEK,QAAQ,GAAC,EAAE,KAAK;EAClD,IAAI,CAACL,CAAC,EAAE,OAAO,sBAAsB;EACrC,IAAI,IAAI,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,mBAAmB;EAC5C,IAAI,CAAC,yBAAyB,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE,OAAO,8CAA8C;EAC7F,IAAI,CAAC,UAAU,CAACC,IAAI,CAACD,CAAC,CAAC,IAAI,CAAC,OAAO,CAACC,IAAI,CAACD,CAAC,CAAC,IAAI,CAAC,aAAa,CAACC,IAAI,CAACD,CAAC,CAAC,EAAE;IACrE,OAAO,0DAA0D;EACnE;EACA,IAAIA,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE,OAAO,+BAA+B;EACxD,IAAIE,QAAQ,IAAIL,CAAC,KAAKK,QAAQ,EAAE,OAAO,oCAAoC;EAC3E,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;EACpD,IAAI,CAACD,OAAO,EAAE,OAAO,yBAAyB;EAC9C,IAAIA,OAAO,KAAKC,QAAQ,EAAE,OAAO,wBAAwB;EACzD,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAIT,CAAC,IAAK;EAClC,IAAI,CAACA,CAAC,EAAE,OAAO,mBAAmB;EAClC,MAAMU,OAAO,GAAG,gCAAgC,CAACT,IAAI,CAACD,CAAC,CAAC;EACxD,IAAI,CAACU,OAAO,EAAE,OAAO,8BAA8B;EACnD,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAIX,CAAC,IAAK;EAClC,IAAI,CAACA,CAAC,EAAE,OAAO,mBAAmB;EAClC,MAAMY,EAAE,GAAG,0BAA0B,CAACX,IAAI,CAACD,CAAC,CAAC;EAC7C,IAAI,CAACY,EAAE,EAAE,OAAO,0BAA0B;EAC1C,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAIC,MAAM,IAAKC,MAAM,CAACC,MAAM,CAACF,MAAM,CAAC,CAACG,KAAK,CAAEC,CAAC,IAAK,CAACA,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}